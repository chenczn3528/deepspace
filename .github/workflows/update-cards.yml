name: Update Cards JSON

on:
  schedule:
    - cron: '0 0 * * *'  # 每天的00:00执行，使用Cron语法
  workflow_dispatch:  # 允许手动触发

jobs:
  update_cards:
    runs-on: ubuntu-latest  # 使用Ubuntu最新版本的运行环境

    steps:
      # Checkout 项目代码
      - name: Checkout repository
        uses: actions/checkout@v2

      # 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # 使用Python 3.x

      # 安装依赖（假设你有一个 requirements.txt 文件）
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 运行 Python 脚本
      - name: Run update script
        run: |
          python src/update_cards.py  # 使用新的脚本名称

      # 检查文件行数并提交
      - name: Check file line count and commit changes
        run: |
          # 获取旧文件的行数
          git fetch origin main
          old_line_count=$(git show origin/main:src/assets/cards.json | wc -l)
          
          # 获取新文件的行数
          new_line_count=$(wc -l < src/assets/cards.json)

          echo "Old file line count: $old_line_count"
          echo "New file line count: $new_line_count"
          
          # 如果新文件的行数多于旧文件，才执行提交
          if [ "$new_line_count" -gt "$old_line_count" ]; then
            echo "Changes detected, proceeding with commit and push."

            # 设置 Git 配置信息
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"

            # 检查当前 Git 状态
            git status

            # 添加文件并提交
            git add src/assets/cards.json
            git commit -m "Update cards.json with more lines"

            # 查看 commit 日志
            git log -n 1

            # 推送更改到远程
            echo "Pushing changes to remote..."
            git push https://github.com/${{ github.repository }}.git HEAD:main --verbose
            sleep 60
          else
            echo "No new lines in the file, skipping commit and push."
          fi
